// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace m_10_04_model_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "/home/travis/build/StanJulia/StatisticalRethinking.jl/docs/build/10/tmp/m_10_04_model.stan");
    reader.add_event(26, 24, "end", "/home/travis/build/StanJulia/StatisticalRethinking.jl/docs/build/10/tmp/m_10_04_model.stan");
    return reader;
}

class m_10_04_model_model : public prob_grad {
private:
    int N;
    int N_actors;
    vector<int> pulled_left;
    vector<int> prosoc_left;
    vector<int> condition;
    vector<int> actor;
public:
    m_10_04_model_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    m_10_04_model_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "m_10_04_model_model_namespace::m_10_04_model_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N_actors", "int", context__.to_vec());
            N_actors = int(0);
            vals_i__ = context__.vals_i("N_actors");
            pos__ = 0;
            N_actors = vals_i__[pos__++];
            current_statement_begin__ = 4;
            validate_non_negative_index("pulled_left", "N", N);
            context__.validate_dims("data initialization", "pulled_left", "int", context__.to_vec(N));
            validate_non_negative_index("pulled_left", "N", N);
            pulled_left = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("pulled_left");
            pos__ = 0;
            size_t pulled_left_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < pulled_left_limit_0__; ++i_0__) {
                pulled_left[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 5;
            validate_non_negative_index("prosoc_left", "N", N);
            context__.validate_dims("data initialization", "prosoc_left", "int", context__.to_vec(N));
            validate_non_negative_index("prosoc_left", "N", N);
            prosoc_left = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("prosoc_left");
            pos__ = 0;
            size_t prosoc_left_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < prosoc_left_limit_0__; ++i_0__) {
                prosoc_left[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 6;
            validate_non_negative_index("condition", "N", N);
            context__.validate_dims("data initialization", "condition", "int", context__.to_vec(N));
            validate_non_negative_index("condition", "N", N);
            condition = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("condition");
            pos__ = 0;
            size_t condition_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < condition_limit_0__; ++i_0__) {
                condition[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 7;
            validate_non_negative_index("actor", "N", N);
            context__.validate_dims("data initialization", "actor", "int", context__.to_vec(N));
            validate_non_negative_index("actor", "N", N);
            actor = std::vector<int>(N,int(0));
            vals_i__ = context__.vals_i("actor");
            pos__ = 0;
            size_t actor_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < actor_limit_0__; ++i_0__) {
                actor[i_0__] = vals_i__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 2;
            current_statement_begin__ = 3;
            current_statement_begin__ = 4;
            current_statement_begin__ = 5;
            current_statement_begin__ = 6;
            current_statement_begin__ = 7;
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 10;
            validate_non_negative_index("a", "N_actors", N_actors);
            num_params_r__ += N_actors;
            current_statement_begin__ = 11;
            ++num_params_r__;
            current_statement_begin__ = 12;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~m_10_04_model_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("a")))
            throw std::runtime_error("variable a missing");
        vals_r__ = context__.vals_r("a");
        pos__ = 0U;
        validate_non_negative_index("a", "N_actors", N_actors);
        context__.validate_dims("initialization", "a", "vector_d", context__.to_vec(N_actors));
        vector_d a(static_cast<Eigen::VectorXd::Index>(N_actors));
        for (int j1__ = 0U; j1__ < N_actors; ++j1__)
            a(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(a);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable a: ") + e.what());
        }

        if (!(context__.contains_r("bp")))
            throw std::runtime_error("variable bp missing");
        vals_r__ = context__.vals_r("bp");
        pos__ = 0U;
        context__.validate_dims("initialization", "bp", "double", context__.to_vec());
        double bp(0);
        bp = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(bp);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable bp: ") + e.what());
        }

        if (!(context__.contains_r("bpC")))
            throw std::runtime_error("variable bpC missing");
        vals_r__ = context__.vals_r("bpC");
        pos__ = 0U;
        context__.validate_dims("initialization", "bpC", "double", context__.to_vec());
        double bpC(0);
        bpC = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(bpC);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable bpC: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  a;
            (void) a;  // dummy to suppress unused var warning
            if (jacobian__)
                a = in__.vector_constrain(N_actors,lp__);
            else
                a = in__.vector_constrain(N_actors);

            local_scalar_t__ bp;
            (void) bp;  // dummy to suppress unused var warning
            if (jacobian__)
                bp = in__.scalar_constrain(lp__);
            else
                bp = in__.scalar_constrain();

            local_scalar_t__ bpC;
            (void) bpC;  // dummy to suppress unused var warning
            if (jacobian__)
                bpC = in__.scalar_constrain(lp__);
            else
                bpC = in__.scalar_constrain();


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body
            {
            current_statement_begin__ = 15;
            validate_non_negative_index("p", "N", N);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  p(static_cast<Eigen::VectorXd::Index>(N));
            (void) p;  // dummy to suppress unused var warning

            stan::math::initialize(p, DUMMY_VAR__);
            stan::math::fill(p,DUMMY_VAR__);


            current_statement_begin__ = 16;
            lp_accum__.add(normal_log<propto__>(bpC, 0, 10));
            current_statement_begin__ = 17;
            lp_accum__.add(normal_log<propto__>(bp, 0, 10));
            current_statement_begin__ = 18;
            lp_accum__.add(normal_log<propto__>(a, 0, 10));
            current_statement_begin__ = 19;
            for (int i = 1; i <= 504; ++i) {

                current_statement_begin__ = 20;
                stan::model::assign(p, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (get_base1(a,get_base1(actor,i,"actor",1),"a",1) + ((bp + (bpC * get_base1(condition,i,"condition",1))) * get_base1(prosoc_left,i,"prosoc_left",1))), 
                            "assigning variable p");
                current_statement_begin__ = 21;
                stan::model::assign(p, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            stan::model::deep_copy(inv_logit(get_base1(p,i,"p",1))), 
                            "assigning variable p");
            }
            current_statement_begin__ = 23;
            lp_accum__.add(binomial_log<propto__>(pulled_left, 1, p));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("a");
        names__.push_back("bp");
        names__.push_back("bpC");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N_actors);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "m_10_04_model_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d a = in__.vector_constrain(N_actors);
        double bp = in__.scalar_constrain();
        double bpC = in__.scalar_constrain();
            for (int k_0__ = 0; k_0__ < N_actors; ++k_0__) {
            vars__.push_back(a[k_0__]);
            }
        vars__.push_back(bp);
        vars__.push_back(bpC);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "m_10_04_model_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= N_actors; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "bp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "bpC";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= N_actors; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "bp";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "bpC";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef m_10_04_model_model_namespace::m_10_04_model_model stan_model;

