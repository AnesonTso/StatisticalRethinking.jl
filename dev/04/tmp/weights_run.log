method = sample (Default)
  sample
method = sample (Default)
    num_samples = 1000 (Default)
    num_warmup = 1000 (Default)
  sample
    save_warmup = 0 (Default)
    num_samples = 1000 (Default)
    thin = 1 (Default)
    num_warmup = 1000 (Default)
    adapt
    save_warmup = 0 (Default)
      engaged = 1 (Default)
    thin = 1 (Default)
      gamma = 0.050000000000000003 (Default)
    adapt
      engaged = 1 (Default)
      delta = 0.80000000000000004 (Default)
      kappa = 0.75 (Default)
      gamma = 0.050000000000000003 (Default)
      t0 = 10 (Default)
      delta = 0.80000000000000004 (Default)
      init_buffer = 75 (Default)
      kappa = 0.75 (Default)
      term_buffer = 50 (Default)
      window = 25 (Default)
      t0 = 10 (Default)
    algorithm = hmc (Default)
      init_buffer = 75 (Default)
      hmc
      term_buffer = 50 (Default)
        engine = nuts (Default)
      window = 25 (Default)
          nuts
    algorithm = hmc (Default)
            max_depth = 10 (Default)
      hmc
        metric = diag_e (Default)
        engine = nuts (Default)
        metric_file =  (Default)
          nuts
            max_depth = 10 (Default)
        stepsize = 1 (Default)
        metric = diag_e (Default)
        stepsize_jitter = 1
        metric_file =  (Default)
id = 1
data
        stepsize = 1 (Default)
  file = weights_1.data.R
        stepsize_jitter = 1
init = 2 (Default)
id = 2
random
data
  seed = 2994032751
  file = weights_2.data.R
output
init = 2 (Default)
  file = weights_samples_1.csv
random
  diagnostic_file =  (Default)
  seed = 2994032751
  refresh = 100 (Default)
output

  file = weights_samples_2.csv
  diagnostic_file =  (Default)
  refresh = 100 (Default)



Gradient evaluation took 8.3e-05 seconds
Gradient evaluation took 8.1e-05 seconds
1000 transitions using 10 leapfrog steps per transition would take 0.83 seconds.
1000 transitions using 10 leapfrog steps per transition would take 0.81 seconds.
Adjust your expectations accordingly!
Adjust your expectations accordingly!




Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:    1 / 2000 [  0%]  (Warmup)
method = sample (Default)
  sample
    num_samples = 1000 (Default)
    num_warmup = 1000 (Default)
    save_warmup = 0 (Default)
    thin = 1 (Default)
    adapt
      engaged = 1 (Default)
      gamma = 0.050000000000000003 (Default)
      delta = 0.80000000000000004 (Default)
      kappa = 0.75 (Default)
      t0 = 10 (Default)
      init_buffer = 75 (Default)
      term_buffer = 50 (Default)
      window = 25 (Default)
    algorithm = hmc (Default)
      hmc
        engine = nuts (Default)
          nuts
            max_depth = 10 (Default)
        metric = diag_e (Default)
        metric_file =  (Default)
        stepsize = 1 (Default)
        stepsize_jitter = 1
id = 3
data
  file = weights_3.data.R
init = 2 (Default)
random
  seed = 2994032757
output
  file = weights_samples_3.csv
  diagnostic_file =  (Default)
  refresh = 100 (Default)


Gradient evaluation took 6.7e-05 seconds
1000 transitions using 10 leapfrog steps per transition would take 0.67 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
method = sample (Default)
  sample
    num_samples = 1000 (Default)
    num_warmup = 1000 (Default)
    save_warmup = 0 (Default)
    thin = 1 (Default)
    adapt
      engaged = 1 (Default)
      gamma = 0.050000000000000003 (Default)
      delta = 0.80000000000000004 (Default)
      kappa = 0.75 (Default)
      t0 = 10 (Default)
      init_buffer = 75 (Default)
      term_buffer = 50 (Default)
      window = 25 (Default)
    algorithm = hmc (Default)
      hmc
        engine = nuts (Default)
          nuts
            max_depth = 10 (Default)
        metric = diag_e (Default)
        metric_file =  (Default)
        stepsize = 1 (Default)
        stepsize_jitter = 1
id = 4
data
  file = weights_4.data.R
init = 2 (Default)
random
  seed = 2994032765
output
  file = weights_samples_4.csv
  diagnostic_file =  (Default)
  refresh = 100 (Default)


Gradient evaluation took 6.2e-05 seconds
1000 transitions using 10 leapfrog steps per transition would take 0.62 seconds.
Adjust your expectations accordingly!


Iteration:    1 / 2000 [  0%]  (Warmup)
Iteration:  100 / 2000 [  5%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  300 / 2000 [ 15%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  500 / 2000 [ 25%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  100 / 2000 [  5%]  (Warmup)
Iteration:  700 / 2000 [ 35%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  100 / 2000 [  5%]  (Warmup)
Iteration:  900 / 2000 [ 45%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  100 / 2000 [  5%]  (Warmup)
Iteration: 1100 / 2000 [ 55%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration:  300 / 2000 [ 15%]  (Warmup)
Iteration:  200 / 2000 [ 10%]  (Warmup)
Iteration: 1300 / 2000 [ 65%]  (Sampling)
Iteration:  300 / 2000 [ 15%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration:  500 / 2000 [ 25%]  (Warmup)
Iteration:  300 / 2000 [ 15%]  (Warmup)
Iteration: 1500 / 2000 [ 75%]  (Sampling)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  500 / 2000 [ 25%]  (Warmup)
Iteration:  400 / 2000 [ 20%]  (Warmup)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration:  700 / 2000 [ 35%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  500 / 2000 [ 25%]  (Warmup)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1700 / 2000 [ 85%]  (Sampling)
Iteration:  700 / 2000 [ 35%]  (Warmup)
Iteration:  600 / 2000 [ 30%]  (Warmup)
Iteration:  900 / 2000 [ 45%]  (Warmup)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration:  700 / 2000 [ 35%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration:  900 / 2000 [ 45%]  (Warmup)
Iteration: 1900 / 2000 [ 95%]  (Sampling)
Iteration: 1100 / 2000 [ 55%]  (Sampling)
Iteration:  800 / 2000 [ 40%]  (Warmup)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 0.203701 seconds (Warm-up)
               0.16313 seconds (Sampling)
               0.366831 seconds (Total)

Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration:  900 / 2000 [ 45%]  (Warmup)
Iteration: 1300 / 2000 [ 65%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1000 / 2000 [ 50%]  (Warmup)
Iteration: 1001 / 2000 [ 50%]  (Sampling)
Iteration: 1500 / 2000 [ 75%]  (Sampling)
Iteration: 1100 / 2000 [ 55%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1100 / 2000 [ 55%]  (Sampling)
Iteration: 1700 / 2000 [ 85%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 1900 / 2000 [ 95%]  (Sampling)
Iteration: 1200 / 2000 [ 60%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 0.253047 seconds (Warm-up)
               0.138471 seconds (Sampling)
               0.391518 seconds (Total)

Iteration: 1300 / 2000 [ 65%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1300 / 2000 [ 65%]  (Sampling)
Iteration: 1500 / 2000 [ 75%]  (Sampling)
Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1400 / 2000 [ 70%]  (Sampling)
Iteration: 1700 / 2000 [ 85%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1900 / 2000 [ 95%]  (Sampling)
Iteration: 1500 / 2000 [ 75%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 0.287364 seconds (Warm-up)
               0.162677 seconds (Sampling)
               0.450041 seconds (Total)

Iteration: 1600 / 2000 [ 80%]  (Sampling)
Iteration: 1700 / 2000 [ 85%]  (Sampling)
Iteration: 1800 / 2000 [ 90%]  (Sampling)
Iteration: 1900 / 2000 [ 95%]  (Sampling)
Iteration: 2000 / 2000 [100%]  (Sampling)

 Elapsed Time: 0.271893 seconds (Warm-up)
               0.307394 seconds (Sampling)
               0.579287 seconds (Total)

