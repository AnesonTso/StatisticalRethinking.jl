using StatisticalRethinking
using TransformVariables
using LogDensityProblems
using DynamicHMC
using MCMCDiagnostics
using Parameters
using Statistics

"""
Toy problem using a Bernoulli distribution.
We model `n` independent draws from a ``Bernoulli(Œ±)`` distribution.
"""
struct BernoulliProblem
    "Total number of draws in the data."
    n::Int
    "Number of draws `==1` in the data"
    s::Vector{Int}
end

function (problem::BernoulliProblem)((Œ±, )::NamedTuple{(:Œ±, )})
    @unpack n, s = problem        # extract the data

    #sum([s1 * log(Œ±) + (n-s1) * log(1-Œ±) for s1 in s])
    loglikelihood(Binomial(n, Œ±), s)
end

obs = rand(Binomial(9, 2/3), 1)
p = BernoulliProblem(9, obs)
p((Œ± = 0.5, ))

P = TransformedLogDensity(as((Œ± = asùïÄ,)), p)
‚àáP = ADgradient(:ForwardDiff, P);

chain, NUTS_tuned = NUTS_init_tune_mcmc(‚àáP, 1000)

posterior = TransformVariables.transform.(Ref(‚àáP.transformation), get_position.(chain));

posterior_Œ± = first.(posterior);

ess_Œ± = effective_sample_size(posterior_Œ±)

NUTS_statistics(chain)

mean(posterior_Œ±)

# This file was generated using Literate.jl, https://github.com/fredrikekre/Literate.jl

